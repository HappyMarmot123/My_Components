https://www.npmjs.com/package/axios
https://www.npmjs.com/package/zustand // 전역상태 관리
https://www.npmjs.com/package/react-query // useQuery

https://www.npmjs.com/package/recharts
https://www.npmjs.com/package/apexcharts
https://www.npmjs.com/package/react-move // 차트 외 유용한 기능 제공

https://www.npmjs.com/package/react-draggable // 자유로운 드래그
https://www.npmjs.com/package/sortablejs  
https://www.npmjs.com/package/react-dnd
https://www.npmjs.com/package/react-moveable // 재밌는 기능
https://www.npmjs.com/package/react-fast-marquee // 전광판 슬라이드쇼


https://www.npmjs.com/package/@lexical/react // 편집기
https://www.npmjs.com/package/draft-js // 용량 큼

https://www.npmjs.com/package/dayjs // 시간+날짜 편집기

https://www.npmjs.com/package/zod // validation으로 유용함

https://www.npmjs.com/package/antd // 용량 존나커서 필요한 것만 가져와 쓰기
https://www.npmjs.com/package/@mui/material // 이슈가 좀 많음
https://www.npmjs.com/package/daisyui
https://www.npmjs.com/package/@chakra-ui/react

https://www.npmjs.com/package/framer-motion // trendy, much of anime
https://www.npmjs.com/package/gsap    // Old guy, no much issue, powerful scroll animation
https://www.npmjs.com/package/lenis   // 300KB, extensions of gsap and framer-motion


[app] 전역설정
[pages] 페이지
[layout] 컴포넌트 묶은거
[components]
[shared] 타입 유틸 이미지 등

components는 index.js 
파일을 만들고 모든 컴포넌트를 export 선언하기
캡슐화를 지양한다.


https://jsonformatter.org/json-pretty-print
https://developer.mozilla.org/ko/docs/Web
https://themewagon.com/theme-category/admin-dashboard/
https://mvnrepository.com/artifact/org.springframework.data
https://freefrontend.com/css-scroll-effects/
https://codepen.io/trending
https://npmtrends.com/dayjs-vs-moment
https://news.hada.io/
https://ykss.netlify.app/translation/react_libraries_for_2024/?utm_source=substack&utm_medium=email#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80
https://www.youtube.com/watch?v=6j8YhzFdozk // 자바스크립트!!
https://inpa.tistory.com/entry/%F0%9F%94%84-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EA%B5%AC%EC%A1%B0-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC
https://inpa.tistory.com/entry/%F0%9F%8C%90-requestAnimationFrame-%EA%B0%80%EC%9D%B4%EB%93%9C
http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D

gsap.to(".eventElement", {
  x: 700,
  duration: 3,
  ScrollTrigger: {
    trigger: ".triggerElement",
    start: "top 60%",
    end: "bottom 30%",
    markers: true,
    toggleClass: "red", // eventElement className
    toggleActions: "restart reverse none none",
    scrub: true // trigger by user scrolls (1~3 smooth value)
    pin: '.eventElement' // 요소 중심이 아닌 사용자 스크롤 중심
    pinSpacing: true // 핀 이벤트 요소의 이벤트 넓이 만큼 아래 요소들 padding
    delay: 0 // 다음 이벤트에 대한 딜레이
    ease: "bounce"
  }
})




// 연속적인 GSAP 이벤트,
const t1 = gsap.timeline({
  ScrollTrigger: {
    trigger: ".eventElement",
    start: "top 80%",
    end: "top 20%",
    scrub: 1
  }
});

t1.to(".eventElement",{x:500, duration:3})
  .to(".eventElement",{y:200, duration:3})

ScrollTrigger.create({
  animation: t1,
  ...
  onEnter: () => console.log("enter"),
  onLeave: () => console.log("leave"),
  onEnterBack: () => console.log("enterBack)
  onLeaveBack: () => console.log("leaveBack)
  onUpdate: (self) => console.log(self) // 이벤트존에서 이동할때 마다
})



// 회전이벤트
gsap.fromTo(el, {rotation:0}, {rotation:180, duration:3})




// 리액트에서 사용법
import {ScrollTrigger} from 'gsap/ScrollTrigger'
gsap.registerPlugin(ScrollTrigger);

let ref = useRef(null);

useEffect(
  const el = ref.current;
  gsap.to(el, ....)
)

<div ref={ref} />




